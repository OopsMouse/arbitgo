@startuml

' Model

Class Order {
	Symbol     Symbol
	BaseAsset  Asset
	QuoteAsset Asset
	OrderType  OrderType
	Price      float64
	Side       OrderSide
	Qty        float64
}

Class Depth {
	BaseAsset  Asset
	QuoteAsset Asset
	Symbol     Symbol
	BidPrice   float64
	AskPrice   float64
	BidQty     float64
	AskQty     float64
}

Class Balance {
	Asset Asset
	Free  float64
	Total float64
}

class Binance {
}

class ExchangeStub {

}

interface Exchange {
	GetCharge() float64
	GetBalance(asset models.Asset) (*models.Balance, error)
	GetBalances() ([]*models.Balance, error)
	GetSymbols() []models.Symbol
	GetDepthList() ([]*models.Depth, error)
	OnUpdateDepthList(recv chan []*models.Depth) error
	SendOrder(order *models.Order) error
}

Balance <-- Exchange
Depth <-- Exchange
Order <-- Exchange
Exchange <-- Binance
Exchange <-- ExchangeStub

' Usecase

Class MarketAnalyzer {
	MainAsset Asset
	Charge    float64
	MaxQty    float64
	Threshold float64
    GenerateBestOrderBook() *models.OrderBook
    GenerateRecoveryOrderBook() *models.OrderBook
}

Class Arbitrader {
	Exchange Exchange
	MarketAnalyzer MarketAnalyzer
	MainAsset Asset
    Run()
    Trade()
    Recovery()
}

MarketAnalyzer <-- Arbitrader
Binance <-- Arbitrader
ExchangeStub <-- Arbitrader

class main {
}

Arbitrader <-- main

@enduml